{"version":3,"sources":["assets/Sanic.jpg","components/Editor.js","components/Preview.js","assets/defaultText.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Editor","props","react_default","a","createElement","className","id","value","defaultText","onChange","eventHandler","Preview","dangerouslySetInnerHTML","__html","markdown","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","defaultImage","sanic","editorText","text","marked","renderFunc","Renderer","handleInput","bind","assertThisInitialized","makeCustomMarked","event","setState","target","newMarkdown","renderer","link","href","title","concat","components_Editor","components_Preview","breaks","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kSCezBC,SAZA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,YACEE,GAAG,SACHC,MAAON,EAAMO,YACbC,SAAUR,EAAMS,kBCETC,SARC,SAACV,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUM,wBAAyB,CAACC,OAAQZ,EAAMa,eCNlDN,EAAA,4eCiECO,qBArDb,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KACDsB,MAAQ,CACXC,aAAcC,IACdC,WAAYC,EACZC,OAAQd,IACRe,WAAY,IAAIf,IAASgB,UAG3Bd,EAAKe,YAAcf,EAAKe,YAAYC,KAAjBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KACnBA,EAAKkB,iBAAmBlB,EAAKkB,iBAAiBF,KAAtBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAVPA,2EAYPmB,GACVhB,KAAKiB,SAAS,CACZV,WAAYS,EAAME,OAAO9B,iDAGZqB,GACf,IAAMU,EAAcV,EACdW,EAAW,IAAID,EAAYR,SACjCS,EAASC,KAAO,SAACC,EAAMC,EAAOf,GAC5B,kBAAAgB,OAAmBF,EAAnB,MAAAE,OACED,EAAQ,SAAWA,EAAQ,GAD7B,qBAAAC,OAEoBhB,EAFpB,SAIFR,KAAKiB,SAAS,CACZR,OAAQU,EACRT,WAAYU,gDAIdpB,KAAKe,iBAAiBpB,sCAGtB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwC,EAAD,CACElC,aAAcS,KAAKY,YACnBvB,YAAaW,KAAKI,MAAMG,aAG1BxB,EAAAC,EAAAC,cAACyC,EAAD,CACE/B,SAAUK,KAAKI,MAAMK,OAAOT,KAAKI,MAAMG,WAAY,CACjDoB,QAAQ,EACRP,SAAUpB,KAAKI,MAAMM,aAEvBJ,MAAON,KAAKI,MAAMC,uBA/CVuB,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6b569b17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sanic.5de345f1.jpg\";","import React from \"react\";\r\nimport \"../css/editor.css\";\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <div className=\"editor-window\">\r\n      <textarea\r\n        id=\"editor\"\r\n        value={props.defaultText}\r\n        onChange={props.eventHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"../css/preview.css\";\r\n\r\nconst Preview = (props) => {\r\n  return (\r\n    <div className=\"preview-window\">\r\n      <div id=\"preview\" dangerouslySetInnerHTML={{__html: props.markdown}} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","export default `# Git Dat Markdown Yo! \r\n## And other useless stories \r\n[link to documentation](https://help.github.com/articles/basic-writing-and-formatting-syntax/)\r\n![sanic][sonic]\r\n\r\n[sonic]: https://i.kym-cdn.com/entries/icons/original/000/001/313/DERP.jpg\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n  - With different indentation levels.\r\n1. and some are numbered\r\n15. but not always in order\r\n\r\n> Block Quotes!\r\n\\`Some Code\\` \r\n\\`\\`\\`\r\n  Some Block Code\r\n\\`\\`\\` \r\n**Bold!!**`;\r\n","import React, {Component} from \"react\";\nimport markdown from \"marked\";\n\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\n\nimport text from \"./assets/defaultText\";\nimport sanic from \"./assets/Sanic.jpg\";\n\nimport \"./css/App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultImage: sanic,\n      editorText: text,\n      marked: markdown,\n      renderFunc: new markdown.Renderer()\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.makeCustomMarked = this.makeCustomMarked.bind(this);\n  }\n  handleInput(event) {\n    this.setState({\n      editorText: event.target.value\n    });\n  }\n  makeCustomMarked(marked) {\n    const newMarkdown = marked;\n    const renderer = new newMarkdown.Renderer();\n    renderer.link = (href, title, text) => {\n      return `<a href=\"${href}\" ${\n        title ? \"title=\" + title : \"\"\n      } target=\"_blank\">${text}</a>`;\n    };\n    this.setState({\n      marked: newMarkdown,\n      renderFunc: renderer\n    });\n  }\n  componentDidMount() {\n    this.makeCustomMarked(markdown);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor\n          eventHandler={this.handleInput}\n          defaultText={this.state.editorText}\n        />\n\n        <Preview\n          markdown={this.state.marked(this.state.editorText, {\n            breaks: true,\n            renderer: this.state.renderFunc\n          })}\n          sanic={this.state.defaultImage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}